# -*- coding: utf-8 -*-
"""Space_Missions_Analysis_(start).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Yz8CAxYvgaZv_xZhCN4xpLZTRjtDB61

# Introduction

<center><img src="https://i.imgur.com/9hLRsjZ.jpg" height=400></center>

This dataset was scraped from [nextspaceflight.com](https://nextspaceflight.com/launches/past/?page=1) and includes all the space missions since the beginning of Space Race between the USA and the Soviet Union in 1957!

### Install Package with Country Codes
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install iso3166

"""### Upgrade Plotly

Run the cell below if you are working with Google Colab.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade plotly

# Commented out IPython magic to ensure Python compatibility.
# %run space_missions_analysis(start).py

"""### Import Statements"""

import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

# These might be helpful:
from iso3166 import countries
from datetime import datetime, timedelta

"""### Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

"""### Load the Data"""

df_data = pd.read_csv('mission_launches.csv')

"""# Preliminary Data Exploration

* What is the shape of `df_data`?
* How many rows and columns does it have?
* What are the column names?
* Are there any NaN values or duplicates?
"""

print(f"shape of data: {df_data.shape}\n column names: {df_data.columns}\n NaN values: {df_data.isna().values.any()}\n duplicates: {df_data.duplicated().values.any()}")



"""## Data Cleaning - Check for Missing Values and Duplicates

Consider removing columns containing junk data.
"""

clean_df = df_data.dropna()

print(f"NaN: {clean_df.isna().values.any()}")

"""## Descriptive Statistics"""

print(f"description:{clean_df.describe()}")

print(f"top 5 organizations for launches:{clean_df['Organisation'].value_counts().head(5)}")
clean_df['Date']= pd.to_datetime(clean_df['Date'], errors='coerce')
clean_df['Year'] = clean_df['Date'].dt.year
print(f"average number of launches per year: {clean_df.groupby('Year').size().mean()}")

"""# Number of Launches per Company

Create a chart that shows the number of space mission launches by organisation.
"""

launches_by_org = clean_df['Organisation'].value_counts()

plt.figure(figsize=(10, 6))
sns.barplot(x=launches_by_org.index, y=launches_by_org.values, palette="rocket")
plt.xticks(rotation=90)
plt.title('Number of Space Mission Launches by Organization')
plt.xlabel('Organization')
plt.ylabel('Number of Launches')
plt.show()

"""# Number of Active versus Retired Rockets

How many rockets are active compared to those that are decomissioned?
"""

rocket_status_counts = clean_df['Rocket_Status'].value_counts()
active_rockets = rocket_status_counts.get('StatusActive', 0)
decommissioned_rockets = rocket_status_counts.get('StatusRetired', 0)

print(f"Active Rockets: {active_rockets}")
print(f"Decommissioned Rockets: {decommissioned_rockets}")

"""# Distribution of Mission Status

How many missions were successful?
How many missions failed?
"""

mission_status_counts = clean_df['Mission_Status'].value_counts()
successful_missions = mission_status_counts.get('Success', 0)
failed_missions = mission_status_counts.get('Failure', 0)

print(f"Successful Missions: {successful_missions}")
print(f"Failed Missions: {failed_missions}")

"""# How Expensive are the Launches?

Create a histogram and visualise the distribution. The price column is given in USD millions (careful of missing values).
"""

clean_df_price = clean_df['Price'].dropna()
sns.displot(clean_df_price, kde=True, color='skyblue', aspect=3)
plt.xticks(rotation=90)
##needed to get xtick labels to be written vertically to see them all and helpful to expand xaxis width using aspect



"""# Use a Choropleth Map to Show the Number of Launches by Country

* Create a choropleth map using [the plotly documentation](https://plotly.com/python/choropleth-maps/)
* Experiment with [plotly's available colours](https://plotly.com/python/builtin-colorscales/). I quite like the sequential colour `matter` on this map.
* You'll need to extract a `country` feature as well as change the country names that no longer exist.

Wrangle the Country Names

You'll need to use a 3 letter country code for each country. You might have to change some country names.

* Russia is the Russian Federation
* New Mexico should be USA
* Yellow Sea refers to China
* Shahrud Missile Test Site should be Iran
* Pacific Missile Range Facility should be USA
* Barents Sea should be Russian Federation
* Gran Canaria should be USA


You can use the iso3166 package to convert the country names to Alpha3 format.
"""

country_mapping = {
    'Russia': 'Russian Federation',
    'New Mexico': 'USA',
    'Yellow Sea': 'China',
    'Shahrud Missile Test Site': 'Iran',
    'Pacific Missile Range Facility': 'USA',
    'Barents Sea': 'Russian Federation',
    'Gran Canaria': 'USA'
}
clean_df['Country'] = clean_df['Location'].apply(lambda loc: loc.split(",")[-1].strip())

clean_df['Country'] = clean_df['Country'].replace(country_mapping)
clean_df['Country Code'] = clean_df['Country'].apply(lambda x: countries.get(x).alpha3 if countries.get(x) else None)
launches_by_country = clean_df.groupby('Country Code').size().reset_index(name='Number of Launches')

fig = px.choropleth(
    launches_by_country,
    locations='Country Code',
    locationmode='ISO-3',
    color='Number of Launches',
    color_continuous_scale=px.colors.sequential.matter,
    title="Number of Space launches by Country",
    scope='world'
)
fig.show()

"""# Use a Choropleth Map to Show the Number of Failures by Country

"""

failures_df = clean_df[clean_df['Mission_Status'] == 'Failure']
failures_by_country = failures_df.groupby('Country Code').size().reset_index(name='Number of Failures')

fig = px.choropleth(
    failures_by_country,
    locations='Country Code',
    locationmode='ISO-3',
    color='Number of Failures',
    color_continuous_scale=px.colors.sequential.matter,
    title="Number of Launch Failures by Country",
    scope='world'
)
fig.show()

"""# Create a Plotly Sunburst Chart of the countries, organisations, and mission status."""



fig = px.sunburst(
    clean_df,
    path=['Country', 'Organisation', 'Mission_Status'],
    title='Sunburst Chart of Launches by Country, Organisation, and Mission Status',
)
fig.show()

##no need to add value= for sunburst, so no need to calculate number of success vs failure

"""# Analyse the Total Amount of Money Spent by Organisation on Space Missions"""

clean_df['Price'] = pd.to_numeric(clean_df['Price'], errors='coerce')
total_spent_by_org = clean_df.groupby('Organisation')['Price'].sum().reset_index()
total_spent_by_org.columns = ['Organisation', 'Total Amount Spent (USD Millions)']
print(total_spent_by_org)

total_spent_by_org = total_spent_by_org.sort_values(by='Total Amount Spent (USD Millions)', ascending=False)

fig = px.bar(
    total_spent_by_org,
    x='Organisation',
    y='Total Amount Spent (USD Millions)',
    title='Total Amount of Money Spent by Organisation on Space Missions',
    labels={'Total Amount Spent (USD Millions)': 'Total Amount Spent (USD Millions)', 'Organisation': 'Organisation'},
    text='Total Amount Spent (USD Millions)',
)
fig.show()

"""# Analyse the Amount of Money Spent by Organisation per Launch"""

org_spending = clean_df.groupby('Organisation').agg(
    Total_Spent=('Price', 'sum'),
    Launch_Count=('Price', 'count')
).reset_index()
org_spending['Average_Spent_Per_Launch'] = org_spending['Total_Spent'] / org_spending['Launch_Count']
org_spending.columns = ['Organisation', 'Total Amount Spent (USD Millions)', 'Number of Launches', 'Average Amount Spent Per Launch (USD Millions)']
print(org_spending)

org_spending = org_spending.sort_values(by='Average Amount Spent Per Launch (USD Millions)', ascending=False)

fig = px.bar(
    org_spending,
    x='Organisation',
    y='Average Amount Spent Per Launch (USD Millions)',
    title='Average Amount of Money Spent by Organisation per Launch',
    labels={'Average Amount Spent Per Launch (USD Millions)': 'Average Amount Spent Per Launch (USD Millions)', 'Organisation': 'Organisation'},
    text='Average Amount Spent Per Launch (USD Millions)',
)
fig.show()

"""# Chart the Number of Launches per Year"""

##Year defined above
launches_per_year = clean_df.groupby('Year').size().reset_index(name='Number of Launches')
print(launches_per_year)

fig = px.line(
    launches_per_year,
    x='Year',
    y='Number of Launches',
    title='Number of Launches per Year',
    labels={'Number of Launches': 'Number of Launches', 'Year': 'Year'},
)
fig.show()

"""# Chart the Number of Launches Month-on-Month until the Present

Which month has seen the highest number of launches in all time? Superimpose a rolling average on the month on month time series chart.
"""

clean_df['YearMonth'] = clean_df['Date'].dt.to_period('M')
launches_per_month = clean_df.groupby('YearMonth').size().reset_index(name='Number of Launches')
launches_per_month['YearMonth'] = launches_per_month['YearMonth'].astype(str)
launches_per_month['Rolling Average'] = launches_per_month['Number of Launches'].rolling(window=3).mean()
print(launches_per_month)

highest_launch_month = launches_per_month.loc[launches_per_month['Number of Launches'].idxmax()]
print(f"The month with the highest number of launches: {highest_launch_month['YearMonth']} with {highest_launch_month['Number of Launches']} launches.")

fig = px.line(
    launches_per_month,
    x='YearMonth',
    y='Number of Launches',
    title='Number of Launches Month-on-Month with Rolling Average',
    labels={'Number of Launches': 'Number of Launches', 'YearMonth': 'Month'},
)
fig.add_scatter(x=launches_per_month['YearMonth'].astype(str), y=launches_per_month['Rolling Average'],
                 mode='lines', name='Rolling Average', line=dict(color='red', width=2, dash='dash'))
fig.show()

"""# Launches per Month: Which months are most popular and least popular for launches?

Some months have better weather than others. Which time of year seems to be best for space missions?
"""

clean_df['Month'] = clean_df['Date'].dt.month
launches_per_month = clean_df.groupby('Month').size().reset_index(name='Number of Launches')
print(launches_per_month)

fig = px.bar(
    launches_per_month,
    x='Month',
    y='Number of Launches',
    title='Number of Launches per Month',
    labels={'Number of Launches': 'Number of Launches', 'Month': 'Month'},
)
fig.update_xaxes(
    tickmode='array',
    tickvals=list(range(1, 13)),
    ticktext=['January', 'February', 'March', 'April', 'May', 'June',
              'July', 'August', 'September', 'October', 'November', 'December']
)
fig.show()

"""# How has the Launch Price varied Over Time?

Create a line chart that shows the average price of rocket launches over time.
"""

clean_df = clean_df.dropna(subset=['Price'])
print(clean_df['Price'].head())
#check datatype

average_price_per_year = clean_df.groupby(clean_df['Date'].dt.year)['Price'].mean().reset_index(name='Average Price')
print(average_price_per_year)

fig = px.line(
    average_price_per_year,
    x='Date',
    y='Average Price',
    title='Average Launch Price Over Time',
    labels={'Average Price': 'Average Launch Price (USD Millions)', 'Date': 'Year'},
)
fig.show()

#had to use dropna Price data so that gaps were not present in graph

"""# Chart the Number of Launches over Time by the Top 10 Organisations.

How has the dominance of launches changed over time between the different players?
"""

df_data['Date'] = pd.to_datetime(df_data['Date'], errors='coerce')
launches_per_organisation = df_data['Organisation'].value_counts().reset_index()
launches_per_organisation.columns = ['Organisation', 'Number of Launches']
top_10_organisations = launches_per_organisation.nlargest(10, 'Number of Launches')['Organisation']
print(top_10_organisations)

filtered_df = df_data[df_data['Organisation'].isin(top_10_organisations)]
filtered_df['Year'] = filtered_df['Date'].dt.year
launches_per_year = filtered_df.groupby(['Year', 'Organisation']).size().reset_index(name='Launches')
for org in top_10_organisations:
    org_launches = launches_per_year[launches_per_year['Organisation'] == org]
    print(f"Launches for {org}:")
    print(org_launches)
    print()

years = filtered_df['Date'].dt.year.unique()
years.sort()
all_years = pd.DataFrame({'Year': years})
all_combinations = pd.MultiIndex.from_product([all_years['Year'], top_10_organisations], names=['Year', 'Organisation']).to_frame(index=False)
launches_by_year_org = filtered_df.groupby([filtered_df['Date'].dt.year, 'Organisation']).size().reset_index(name='Number of Launches')
pivot_df = launches_by_year_org.pivot(index='Date', columns='Organisation', values='Number of Launches').fillna(0)
print(launches_by_year_org)

fig = px.line(
    launches_by_year_org,
    x='Date',
    y='Number of Launches',
    color='Organisation',
    title='Number of Launches Over Time by Top 10 Organisations',
    labels={'Number of Launches': 'Number of Launches', 'Date': 'Year'},
)
fig.show()

##used not clean_df data because many prices are not shown for 1970s and other dates and it is not relflective of actual total launches

"""# Cold War Space Race: USA vs USSR

The cold war lasted from the start of the dataset up until 1991.
"""

#need to redo country mapping from above because were not using clean_df because we want all possible launches even if there is no price
df_data['Date'] = pd.to_datetime(df_data['Date'], errors='coerce').dt.tz_localize(None)

country_mapping = {
    'Russia': 'Russian Federation',
    'New Mexico': 'USA',
    'Yellow Sea': 'China',
    'Shahrud Missile Test Site': 'Iran',
    'Pacific Missile Range Facility': 'USA',
    'Barents Sea': 'Russian Federation',
    'Gran Canaria': 'USA'
}

df_data['Country'] = df_data['Location'].apply(lambda loc: loc.split(",")[-1].strip())

df_data['Country'] = df_data['Country'].replace(country_mapping)
print("Updated Country Column:")
print(df_data['Country'].unique())

def get_country_code(country_name):
    try:
        return countries.get(country_name).alpha3
    except KeyError:
        return None

df_data['Country_Code'] = df_data['Country'].apply(get_country_code)

print("Unique Country Codes in df_data:")
print(df_data['Country_Code'].unique())

cold_war_countries = ['USA', 'RUS', 'KAZ']
cold_war_start = 1947
cold_war_end = 1991
cold_war_df = df_data[
    (df_data['Country_Code'].isin(cold_war_countries)) &
    (df_data['Date'].dt.year >= cold_war_start) &
    (df_data['Date'].dt.year <= cold_war_end)
]

"""## Create a Plotly Pie Chart comparing the total number of launches of the USSR and the USA

Hint: Remember to include former Soviet Republics like Kazakhstan when analysing the total number of launches.
"""

cold_war_df['Country_Code'] = cold_war_df['Country_Code'].replace({'RUS': 'USSR', 'KAZ': 'USSR'})
launch_counts = cold_war_df['Country_Code'].value_counts().reset_index()
launch_counts.columns = ['Country_Code', 'Total_Launches']

fig = px.pie(launch_counts,
             values='Total_Launches',
             names='Country_Code',
             title='Total Number of Launches: USA vs USSR (Including Kazakhstan)',
             color='Country_Code',
             color_discrete_map={'USA': 'blue', 'USSR': 'red'})
fig.show()

"""## Create a Chart that Shows the Total Number of Launches Year-On-Year by the Two Superpowers"""

cold_war_df['Year'] = cold_war_df['Date'].dt.year

yearly_launches = cold_war_df.groupby(['Year', 'Country_Code']).size().reset_index(name='Total_Launches')

fig = px.line(yearly_launches,
              x='Year',
              y='Total_Launches',
              color='Country_Code',
              title='Total Number of Launches Year-on-Year: USA vs USSR (Including Kazakhstan)',
              labels={'Total_Launches': 'Total Launches', 'Year': 'Year'},
              markers=True)

fig.show()

"""## Chart the Total Number of Mission Failures Year on Year."""

failures_df = cold_war_df[cold_war_df['Mission_Status'].str.contains('Failure', na=False)]
yearly_failures = failures_df.groupby(['Year', 'Country_Code']).size().reset_index(name='Total_Failures')

fig = px.line(yearly_failures,
              x='Year',
              y='Total_Failures',
              color='Country_Code',
              title='Total Number of Mission Failures Year-on-Year: USA vs USSR (Including Kazakhstan)',
              labels={'Total_Failures': 'Total Failures', 'Year': 'Year'},
              markers=True)
fig.show()

"""## Chart the Percentage of Failures over Time

Did failures go up or down over time? Did the countries get better at minimising risk and improving their chances of success over time?
"""

cold_war_df['Failure'] = cold_war_df['Mission_Status'].str.contains('Failure', na=False)

yearly_stats = cold_war_df.groupby(['Year', 'Country_Code']).agg(
    Total_Launches=('Failure', 'count'),
    Total_Failures=('Failure', 'sum')
).reset_index()

yearly_stats['Percentage_Failures'] = (yearly_stats['Total_Failures'] / yearly_stats['Total_Launches']) * 100

fig = px.line(yearly_stats,
              x='Year',
              y='Percentage_Failures',
              color='Country_Code',
              title='Percentage of Failures Year-on-Year: USA vs USSR (Including Kazakhstan)',
              labels={'Percentage_Failures': 'Percentage of Failures (%)', 'Year': 'Year'},
              markers=True)
fig.show()

"""# For Every Year Show which Country was in the Lead in terms of Total Number of Launches up to and including including 2020)

Do the results change if we only look at the number of successful launches?
"""

df_data['Year'] = df_data['Date'].dt.year
yearly_launches = df_data.groupby(['Year', 'Country_Code']).size().reset_index(name='Total_Launches')

leading_countries = yearly_launches.loc[yearly_launches.groupby('Year')['Total_Launches'].idxmax()]

fig = px.bar(leading_countries,
             x='Year',
             y='Total_Launches',
             color='Country_Code',
             title='Leading Country by Total Number of Launches Year-on-Year (Up to 2020)',
             labels={'Total_Launches': 'Total Number of Launches', 'Year': 'Year'})

fig.show()

print(leading_countries)

successful_missions = df_data[df_data['Mission_Status'] == 'Success']
yearly_successful_launches = successful_missions.groupby(['Year', 'Country_Code']).size().reset_index(name='Total_Successful_Launches')
leading_successful_countries = yearly_successful_launches.loc[yearly_successful_launches.groupby('Year')['Total_Successful_Launches'].idxmax()]

fig = px.bar(leading_successful_countries,
             x='Year',
             y='Total_Successful_Launches',
             color='Country_Code',
             title='Leading Country by Total Number of Successful Launches Year-on-Year (Up to 2020)',
             labels={'Total_Successful_Launches': 'Total Number of Successful Launches', 'Year': 'Year'})
fig.show()


print(leading_successful_countries)

"""# Create a Year-on-Year Chart Showing the Organisation Doing the Most Number of Launches

Which organisation was dominant in the 1970s and 1980s? Which organisation was dominant in 2018, 2019 and 2020?
"""

yearly_launches = df_data.groupby(['Year', 'Organisation']).size().reset_index(name='Total_Launches')
dominant_organizations = yearly_launches.loc[yearly_launches.groupby('Year')['Total_Launches'].idxmax()]
fig = px.bar(dominant_organizations,
             x='Year',
             y='Total_Launches',
             color='Organisation',
             title='Dominant Organisation by Total Number of Launches Year-on-Year',
             labels={'Total_Launches': 'Total Number of Launches', 'Year': 'Year'})
fig.show()
print(dominant_organizations)

dominant_70s = dominant_organizations[dominant_organizations['Year'].between(1970, 1979)]
dominant_80s = dominant_organizations[dominant_organizations['Year'].between(1980, 1989)]

dominant_organization_70s = dominant_70s['Organisation'].mode()[0] if not dominant_70s.empty else "No Data"
dominant_organization_80s = dominant_80s['Organisation'].mode()[0] if not dominant_80s.empty else "No Data"

print(f"\nDominant Organization in the 1970s: {dominant_organization_70s}")
print(f"Dominant Organization in the 1980s: {dominant_organization_80s}")

dominant_2018 = dominant_organizations[dominant_organizations['Year'] == 2018]
dominant_2019 = dominant_organizations[dominant_organizations['Year'] == 2019]
dominant_2020 = dominant_organizations[dominant_organizations['Year'] == 2020]

print(f"Dominant Organization in 2018: {dominant_2018['Organisation'].values[0] if not dominant_2018.empty else 'No Data'}")
print(f"Dominant Organization in 2019: {dominant_2019['Organisation'].values[0] if not dominant_2019.empty else 'No Data'}")
print(f"Dominant Organization in 2020: {dominant_2020['Organisation'].values[0] if not dominant_2020.empty else 'No Data'}")